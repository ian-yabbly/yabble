<?xml version='1.0' encoding='utf-8'?>

<beans
    xmlns='http://www.springframework.org/schema/beans'
    xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
    xmlns:c='http://www.springframework.org/schema/c'
    xmlns:p='http://www.springframework.org/schema/p'
    xsi:schemaLocation='
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd'
        >

  <bean
      class='org.springframework.beans.factory.config.PropertyPlaceholderConfigurer'
      p:system-properties-mode-name='SYSTEM_PROPERTIES_MODE_OVERRIDE'
      p:ignore-unresolvable-placeholders='true'
      p:ignore-resource-not-found='true'
      >
    <property name='locations'>
      <list>
        <value>classpath:service.properties</value>
        <value>file://${app.home}/etc/override.properties</value>
        <value>file://${app.home}/etc/local.properties</value>
      </list>
    </property>
  </bean>

  <!-- DB -->
  <bean
      id='service.data-source'
      class='org.apache.commons.dbcp.BasicDataSource'
      destroy-method='close'
      p:driver-class-name='org.postgresql.Driver'
      p:url='${db.url}'
      p:username='${db.username}'
      p:password='${db.password}'
      p:max-active='${db.pool.max-active-connections}'
      p:max-idle='${db.pool.max-idle-connections}'
      p:max-wait='${db.pool.max-wait-ms}'
      p:default-auto-commit='false'
      />

  <bean
      id='service.jdbc-template'
      class='org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate'
      c:data-source-ref='service.data-source'
      />

  <bean
      id='service.txn-manager'
      class='org.springframework.jdbc.datasource.DataSourceTransactionManager'
      p:data-source-ref='service.data-source'
      />

  <bean
      id='service.txn-template'
      class='org.springframework.transaction.support.TransactionTemplate'
      p:transaction-manager-ref='service.txn-manager'
      />

  <bean
      id='service.txn-interceptor'
      class='me.yabble.service.TxnMethodInterceptor'
      c:txn-manager-ref='service.txn-manager'
      />
  <!-- END DB -->

  <!-- MISC -->
  <bean
      id="service.s3-store"
      class="me.yabble.service.S3Store"
      c:aws-access-key="${aws.access-key}"
      c:aws-secret-key="${aws.secret-key}"
      c:bucket-name="${service.s3-store.bucket-name}"
      />

  <bean
      id='service.mail-velocity-template'
      class='me.yabble.service.velocity.VelocityTemplate'
      c:encoding='${app.encoding}'
      >
    <constructor-arg>
      <props>
        <prop key='runtime.references.strict'>true</prop>
        <prop key='input.encoding'>${app.encoding}</prop>
        <prop key='output.encoding'>${app.encoding}</prop>

        <prop key='resource.loader'>classpath</prop>
        <prop key='classpath.resource.loader.class'>org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader</prop>
        <prop key='velocimacro.library'>velocity/mail-macros.vm</prop>
        <prop key='velocimacro.arguments.strict'>true</prop>
        <prop key='runtime.introspector.uberspect'>me.yabble.service.velocity.ScalaUberspect</prop>
      </props>
    </constructor-arg>

    <constructor-arg>
      <map>
        <entry key='__version' value='${app.version-hash}'/>
        <entry key='__versionPathPart' value='v-${app.version-hash}'/>
        <entry key='__formatService' value-ref='service.format-service'/>
        <entry key='__securityUtilsBean' value-ref='common.security-utils-bean'/>
        <entry key='__imageService' value-ref='service.image-service'/>
        <entry key='__rootUrl' value='${service.canonical-base-url}'/>
      </map>
    </constructor-arg>
  </bean>
  <!-- END MISC -->

  <!-- DAO -->
  <bean
      id='service.user-dao'
      class='me.yabble.service.dao.UserDao'
      c:image-dao-ref='service.image-dao'
      c:npt-ref='service.jdbc-template'
      c:txn-sync-ref='common.txn-sync'
      c:work-queue-ref='common.work-queue'
      />

  <bean
      id='service.user-auth-dao'
      class='me.yabble.service.dao.UserAuthDao'
      c:npt-ref='service.jdbc-template'
      c:txn-sync-ref='common.txn-sync'
      c:work-queue-ref='common.work-queue'
      />

  <bean
      id='service.user-notification-dao'
      class='me.yabble.service.dao.UserNotificationDao'
      c:user-dao-ref='service.user-dao'
      c:npt-ref='service.jdbc-template'
      c:txn-sync-ref='common.txn-sync'
      c:work-queue-ref='common.work-queue'
      />

  <bean
      id='service.user-notification-push-dao'
      class='me.yabble.service.dao.UserNotificationPushDao'
      c:npt-ref='service.jdbc-template'
      c:txn-sync-ref='common.txn-sync'
      c:work-queue-ref='common.work-queue'
      />

  <bean
      id='service.image-dao'
      class='me.yabble.service.dao.ImageDao'
      c:npt-ref='service.jdbc-template'
      c:txn-sync-ref='common.txn-sync'
      c:work-queue-ref='common.work-queue'
      />

  <bean
      id='service.ylist-dao'
      class='me.yabble.service.dao.YListDao'
      c:user-dao-ref='service.user-dao'
      c:ylist-comment-dao-ref='service.ylist-comment-dao'
      c:ylist-item-dao-ref='service.ylist-item-dao'
      c:npt-ref='service.jdbc-template'
      c:txn-sync-ref='common.txn-sync'
      c:work-queue-ref='common.work-queue'
      />

  <bean
      id='service.ylist-comment-dao'
      class='me.yabble.service.dao.YListCommentDao'
      c:user-dao-ref='service.user-dao'
      c:npt-ref='service.jdbc-template'
      c:txn-sync-ref='common.txn-sync'
      c:work-queue-ref='common.work-queue'
      />

  <bean
      id='service.ylist-item-dao'
      class='me.yabble.service.dao.YListItemDao'
      c:user-dao-ref='service.user-dao'
      c:image-dao-ref='service.image-dao'
      c:ylist-item-vote-dao-ref='service.ylist-item-vote-dao'
      c:ylist-item-comment-dao-ref='service.ylist-item-comment-dao'
      c:npt-ref='service.jdbc-template'
      c:txn-sync-ref='common.txn-sync'
      c:work-queue-ref='common.work-queue'
      />

  <bean
      id='service.ylist-item-comment-dao'
      class='me.yabble.service.dao.YListItemCommentDao'
      c:user-dao-ref='service.user-dao'
      c:npt-ref='service.jdbc-template'
      c:txn-sync-ref='common.txn-sync'
      c:work-queue-ref='common.work-queue'
      />

  <bean
      id='service.ylist-item-vote-dao'
      class='me.yabble.service.dao.YListItemVoteDao'
      c:user-dao-ref='service.user-dao'
      c:npt-ref='service.jdbc-template'
      c:txn-sync-ref='common.txn-sync'
      c:work-queue-ref='common.work-queue'
      />
  <!-- END DAO -->

  <!-- Service -->
  <bean
      id='service.user-service'
      class='org.springframework.aop.framework.ProxyFactoryBean'
      p:proxy-interfaces='me.yabble.service.UserService'
      p:interceptor-names='service.txn-interceptor'
      >
    <property name='target'>
      <bean
          class='me.yabble.service.UserServiceImpl'
          c:user-dao-ref='service.user-dao'
          c:user-auth-dao-ref='service.user-auth-dao'
          c:user-notification-dao-ref='service.user-notification-dao'
          />
    </property>
  </bean>

  <bean
      id='service.ylist-service'
      class='org.springframework.aop.framework.ProxyFactoryBean'
      p:proxy-interfaces='me.yabble.service.YListService'
      p:interceptor-names='service.txn-interceptor'
      >
    <property name='target'>
      <bean
          class='me.yabble.service.YListServiceImpl'
          c:ylist-dao-ref='service.ylist-dao'
          c:ylist-comment-dao-ref='service.ylist-comment-dao'
          c:ylist-item-dao-ref='service.ylist-item-dao'
          c:ylist-item-comment-dao-ref='service.ylist-item-comment-dao'
          c:ylist-item-vote-dao-ref='service.ylist-item-vote-dao'
          />
    </property>
  </bean>

  <bean
      id='service.image-service'
      class='org.springframework.aop.framework.ProxyFactoryBean'
      p:proxy-interfaces='me.yabble.service.ImageService'
      p:interceptor-names='service.txn-interceptor'
      >
    <property name='target'>
      <bean
          class='me.yabble.service.ImageServiceImpl'
          c:image-dao-ref='service.image-dao'
          c:http-client-ref='common.http-client'
          c:s3-store-ref='service.s3-store'
          c:convert-path='${imagemagick.convert-path}'
          c:identify-path='${imagemagick.identify-path}'
          c:default-profile-image-url='${service.default-profile-image-url}'
          />
    </property>
  </bean>

  <bean
      id='service.yabble-service'
      class='org.springframework.aop.framework.ProxyFactoryBean'
      p:proxy-interfaces='me.yabble.service.YabbleService'
      p:interceptor-names='service.txn-interceptor'
      >
    <property name='target'>
      <bean
          class='me.yabble.service.YabbleServiceImpl'
          c:ylist-service-ref='service.ylist-service'
          />
    </property>
  </bean>

  <bean
      id='service.format-service'
      class='me.yabble.service.FormatService'
      c:redis-client-ref="common.redis-client"
      />
  <!-- END Service -->

</beans>
